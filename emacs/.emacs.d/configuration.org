#+TITLE: Emacs Configuration
#+AUTHOR: Romain Basseville
#+EMAIL: romain.basseville@gmail.com

* Package management
** Configure =use-package=
#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (setq use-package-verbose t)
  (setq use-package-always-ensure t)

  (require 'use-package)
#+END_SRC

** Compile packages and use newer
#+BEGIN_SRC emacs-lisp
  (use-package auto-compile
    :config (auto-compile-on-load-mode))
  (setq load-prefer-newer t)
#+END_SRC
** Auto update packages
Packages will be updated every 4 days, and the old packages will be removed.
#+BEGIN_SRC emacs-lisp
  (use-package auto-package-update
     :config
     (setq auto-package-update-delete-old-versions t
	   auto-package-update-interval 4)
     (auto-package-update-maybe))
#+END_SRC
* Personal information

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Romain Basseville"
        user-mail-address "romain.basseville@gmail.com"
        )
#+END_SRC

* General
** No backup files
Don't save ~ files
#+BEGIN_SRC emacs-lisp
(setq make-backup-files nil)
#+END_SRC
** Path from shell
#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :config
    (when (memq window-system '(mac ns x))
      (exec-path-from-shell-initialize)))

#+END_SRC
* Org
** Use org and set agenda files
#+BEGIN_SRC emacs-lisp
    (use-package org
      :config
      (setq org-agenda-files
	    (quote
	     ("~/Dropbox/Orgzly/work.org"
	      "~/Dropbox/Orgzly/explore.org"
	      "~/Dropbox/Orgzly/perso.org"
	      "~/Dropbox/Orgzly/geek.org"
	      "~/Dropbox/Orgzly/finance.org"
	      "~/Dropbox/Orgzly/travel.org"
	      "~/Dropbox/Orgzly/cs.org"
	      "~/Dropbox/Orgzly/crypto.org"))))

#+END_SRC
** Pomodoro
#+BEGIN_SRC emacs-lisp
  (use-package org-pomodoro
    :after org)
#+END_SRC

** Make today's agenda the startup screen
#+BEGIN_SRC emacs-lisp
  (setq inhibit-splash-screen t)
  (org-agenda-list 1)
  (delete-other-windows)
#+END_SRC
* Theme
Solarized dark theme
#+BEGIN_SRC emacs-lisp
  (use-package solarized-theme
    :config 
    (load-theme 'solarized-dark t))
#+END_SRC

** Remove bars
#+BEGIN_SRC emacs-lisp
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (setq ns-auto-hide-menu-bar t)
#+END_SRC

** Babel code block
Source code block syntax highlighting
#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
#+END_SRC

Make TAB act as if it were issued in a buffer of the language's major mode.
#+BEGIN_SRC emacs-lisp
  (setq org-src-tab-acts-natively t)
#+END_SRC

Quickly insert a block of elisp and shell
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
	       '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC")
	       '("sh" "#+BEGIN_SRC sh\n?\n#+END_SRC"))
#+END_SRC

** Window splitting
Split vertically by default
#+BEGIN_SRC emacs-lisp
  (setq split-height-threshold nil)
  (setq split-width-threshold 0)
#+END_SRC
* Calendar
#+BEGIN_SRC emacs-lisp
(setq calendar-week-start-day 1
calendar-latitude 103.886114
calendar-longitude 1.311787)
#+END_SRC

** Calendar events in =org-agenda=
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-include-diary t)
#+END_SRC

** TODO people birthday
** TODO public holidays
** TODO sunrise sunset
* Navigation
** M-x suggestions with =smex=
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :init (smex-initialize)
    :bind ("M-x" . smex))
#+END_SRC
* Git
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :bind ("C-x g" . magit-status))
#+END_SRC
** Follow symlink instead of prompting
To avoid message: Symbolic link to Git-controlled source file; follow link? (y or n)
#+BEGIN_SRC emacs-lisp
  (setq vc-follow-symlinks t)
#+END_SRC
* Programming Languages
#+BEGIN_SRC emacs-lisp
(use-package flycheck :ensure t :pin melpa)
(use-package company :ensure t :pin melpa)
#+END_SRC
** Golang
#+BEGIN_SRC emacs-lisp
  (use-package go-mode
    :mode "\\.go\\'"
    :interpreter "go")
  (use-package go-guru
    :after go-mode)
#+END_SRC
** Markdown
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :mode (("\\.md\\'" . markdown-mode)
	   ("README\\.md\\'" . gfm-mode)))
#+END_SRC

<<<<<<< HEAD
** Python
#+BEGIN_SRC emacs-lisp
  (use-package elpy
    :ensure t
    :defer t
    :init
    (advice-add 'python-mode :before 'elpy-enable))

=======
** Terraform
#+BEGIN_SRC emacs-lisp
  (use-package terraform-mode
    :mode "\\.tf\\'")
>>>>>>> 57fd2bf73a3416cb26928b5ab2c5854006205850
#+END_SRC
* Keystroke optimisation
Replace 'yes' by 'y', 'no' by 'n' everywhere
#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

Kill current buffer without prompt
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x k") 'kill-this-buffer)
#+END_SRC


